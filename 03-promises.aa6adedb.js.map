{"mappings":"YAAAA,QAAQC,IAAI,YACZ,IAAMC,EAAOC,SAASC,uBAAuB,QACzBD,SAASE,cAAc,UAI3CH,EAAK,GAAGI,iBAAiB,UAAU,SAACC,GAClCA,EAAEC,iBACF,IAA4BC,EAAAF,EAAEG,cAAvBC,EAAqBF,EAArBG,MAAOC,EAAcJ,EAAdI,KAAMC,EAAQL,EAARK,OAEpBC,aAAcC,SAASL,EAAMM,OAC7BC,YAAaF,SAASH,EAAKI,OAG3B,IAAI,IAAIE,EAAE,EAAEA,GAAGL,EAAOG,MAAOE,IAAI,CAK9B,SAASC,EAAcC,EAAUT,GAEb,IAAIU,SAAQ,SAACC,EAASC,GACvCC,YAAW,WAEaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEF,WAAUT,UAIpBY,EAAO,CAAEH,WAAUT,S,GAKpBA,E,IAKAgB,MAAM,SAAAC,GACN7B,QAAQC,IAAI,uBAA4C6B,OAAnBD,EAAIR,SAAS,QAAgBS,OAAVD,EAAIjB,MAAM,M,IAIlEmB,OAAM,SAAAC,GACLhC,QAAQC,IAAI,sBAA2C6B,OAArBE,EAAMX,SAAS,QAAkBS,OAAZE,EAAMpB,MAAM,M,IA7B3EQ,EAAcD,EAAEJ,cAiChBA,cAA0BG,W,CAO1BhB,EAAK,GAAG+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["console.log(\"CONECTED\");\nconst form = document.getElementsByClassName('form')\nconst CreateButton= document.querySelector('button') \n\n\n\nform[0].addEventListener(\"submit\", (e)=>{\n  e.preventDefault()\n  const {delay, step, amount}=e.currentTarget\n\n  delayEntered= parseInt(delay.value)\n  stepEndered= parseInt(step.value)\n\n\n  for(let i=1;i<=amount.value; i++){\n    \n    \n    \n    createPromise(i,delayEntered)\n     function createPromise(position, delay) {\n      \n      let promiseReturn= new Promise((resolve, reject) => {\n        setTimeout(() => {\n          /* console.log(\"Entramos a la promesa\") */\n          const shouldResolve = Math.random() > 0.3;\n          \n          if (shouldResolve) {\n            resolve({ position, delay });\n            \n            \n          } else {\n            reject({ position, delay });\n            \n            \n          }\n          \n        }, delay);\n        \n        \n      });\n      promiseReturn\n          .then (res=>{\n           console.log(`✅ Fulfilled promise ${res.position} in ${res.delay}ms`);\n           \n            \n          })\n          .catch(error=>{\n            console.log(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n            \n          })\n    } \n    delayEntered=delayEntered+stepEndered\n    \n\n  }\n  \n\n\n    form[0].reset()\n})\n\n  \n  /* for (let i=0; i<amount; i++){\n    console.log(\"Entramos una vez\")\n    console.log(amount)\n   }  */\n\n\n/*  function createPromise(position, delay) {\n  console.log(\"que pasa tio\")\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(\"que pasa tio\")\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n} */\n\n/* \ncrea un ciclo en base al numero de promesas ingresadas en el \namount y pasa los parametros del delay */\n///\n\n/* function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n} */\n/* esta incompleta debes crear un funcion que genere promesas con\n un retraso para el la generacion de promesas */"],"names":["console","log","$ce04d3a99e08e73b$var$form","document","getElementsByClassName","querySelector","addEventListener","e","preventDefault","_currentTarget","currentTarget","delay1","delay","step","amount","delayEntered","parseInt","value","stepEndered","i","createPromise","position","Promise","resolve","reject","setTimeout","Math","random","then","res","concat","catch","error","reset"],"version":3,"file":"03-promises.aa6adedb.js.map"}